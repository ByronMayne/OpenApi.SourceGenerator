using Microsoft.AspNetCore.Mvc;
using Microsoft.OpenApi.Models;
using Microsoft.OpenApi.Readers;
using Microsoft.OpenApi.Writers;
using System.Net;
using System.Reflection;

namespace {{Globals.RootNamespace}}.Controllers
{
    [ApiController]
    public class SwaggerController : Controller
    {
        private readonly OpenApiSettings m_settings;
        private static readonly OpenApiDocument? m_openApiDocument;
        private static readonly OpenApiDiagnostic? m_openApiDiagnostic;

        static SwaggerController()
        {
            m_openApiDocument = null;
            m_openApiDiagnostic = null;
            Assembly assembly = typeof(SwaggerController).Assembly;
            using Stream? stream = assembly.GetManifestResourceStream("OpenApiSpecification");
            if (stream != null)
            {
                OpenApiStreamReader reader = new();
                m_openApiDocument = reader.Read(stream, out m_openApiDiagnostic);
            }

        }

        public SwaggerController([FromServices] OpenApiSettings settings)
        {
            m_settings = settings;
        }

        [HttpGet("swagger/v1/swagger.json")]
        [Produces("application/json")]
        public IActionResult GetAsync()
        {
            if (m_openApiDiagnostic != null && m_openApiDiagnostic.Errors.Count != 0)
            {
                JsonResult jsonResult = Json(new
                {
                    message = "error parsing open api documention, see diagnostic below",
                    diagnostic = m_openApiDiagnostic
                });
                jsonResult.StatusCode = (int)HttpStatusCode.InternalServerError;
                return jsonResult;
            }

            if (m_openApiDocument == null)
            {
                return StatusCode(StatusCodes.Status404NotFound);
            }

            if (m_settings.AddHostToServers)
            {
                string uri = $"{(HttpContext.Request.IsHttps ? "https://" : "http://")}{HttpContext.Request.Host.Value}";
                m_openApiDocument.Servers.Insert(0, new OpenApiServer()
                {
                    Url = uri,
                    Description = "The current service"
                });
            }

            using StringWriter stringWriter = new();
            OpenApiJsonWriter jsonWriter = new(stringWriter);
            m_openApiDocument.SerializeAsV3(jsonWriter);
            stringWriter.Flush();
            return Content(stringWriter.ToString(), "application/json");
        }
    }
}